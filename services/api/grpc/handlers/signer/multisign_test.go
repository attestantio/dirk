// Copyright Â© 2021, 2025 Attestant Limited.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package signer_test

import (
	context "context"
	"fmt"
	"testing"

	"github.com/attestantio/dirk/services/api/grpc/interceptors"
	"github.com/attestantio/dirk/testing/logger"
	"github.com/stretchr/testify/require"
	pb "github.com/wealdtech/eth2-signer-api/pb/v1"
)

func TestMultisign(t *testing.T) {
	tests := []struct {
		name       string
		client     string
		req        *pb.MultisignRequest
		states     []pb.ResponseState
		err        string
		logEntries []map[string]any
	}{
		{
			name:   "Empty",
			client: "client1",
			states: []pb.ResponseState{pb.ResponseState_DENIED},
			logEntries: []map[string]any{
				{"message": "Request not specified"},
			},
		},
		{
			name:   "IDMissing",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_DENIED},
			logEntries: []map[string]any{
				{"message": "Neither account nor public key specified"},
			},
		},
		{
			name:   "IDInvalid",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Bad",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_DENIED},
			logEntries: []map[string]any{
				{"message": "Invalid account specified"},
			},
		},
		{
			name:   "PubkeyInvalid",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_PublicKey{
							PublicKey: []byte{},
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_DENIED},
			logEntries: []map[string]any{
				{"message": "Did not obtain account; denied"},
			},
		},
		{
			name:   "DomainMissing",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_DENIED},
			logEntries: []map[string]any{
				{"message": "Request domain not specified"},
			},
		},
		{
			name:   "NoRequests",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{},
			},
			states: []pb.ResponseState{pb.ResponseState_DENIED},
			logEntries: []map[string]any{
				{"message": "Request empty"},
			},
		},
		{
			name:   "RequestNil",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					nil,
				},
			},
			states: []pb.ResponseState{pb.ResponseState_FAILED},
			logEntries: []map[string]any{
				{"message": "Request nil"},
			},
		},
		{
			name:   "DataMissing",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Domain: []byte{
							0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_DENIED},
			logEntries: []map[string]any{
				{"message": "Request data not specified"},
			},
		},
		{
			name:   "GoodId",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_SUCCEEDED},
			logEntries: []map[string]any{
				{"message": "Success"},
			},
		},
		{
			name:   "GoodPubkey",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_PublicKey{
							PublicKey: []byte{
								0x94, 0x6e, 0x0f, 0x38, 0xa0, 0x23, 0xb9, 0xf1, 0xad, 0x94, 0x9c, 0xe2, 0xad, 0x85, 0x31, 0xc4,
								0xdb, 0x53, 0x7e, 0x31, 0x34, 0x26, 0x59, 0x9c, 0x2d, 0x9a, 0xe8, 0xab, 0xee, 0xef, 0x7a, 0x43,
								0x3d, 0x06, 0x67, 0x39, 0xf8, 0x16, 0xdd, 0x53, 0x7a, 0xdb, 0x2e, 0x4b, 0x84, 0x11, 0xcc, 0xcb,
							},
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_SUCCEEDED},
			logEntries: []map[string]any{
				{"message": "Success"},
			},
		},
		{
			name:   "GoodMultiId",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 2",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_SUCCEEDED, pb.ResponseState_SUCCEEDED},
			logEntries: []map[string]any{
				{"message": "Success"},
			},
		},
		{
			name:   "GoodMultiPubkey",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_PublicKey{
							PublicKey: []byte{
								0x94, 0x6e, 0x0f, 0x38, 0xa0, 0x23, 0xb9, 0xf1, 0xad, 0x94, 0x9c, 0xe2, 0xad, 0x85, 0x31, 0xc4,
								0xdb, 0x53, 0x7e, 0x31, 0x34, 0x26, 0x59, 0x9c, 0x2d, 0x9a, 0xe8, 0xab, 0xee, 0xef, 0x7a, 0x43,
								0x3d, 0x06, 0x67, 0x39, 0xf8, 0x16, 0xdd, 0x53, 0x7a, 0xdb, 0x2e, 0x4b, 0x84, 0x11, 0xcc, 0xcb,
							},
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
					{
						Id: &pb.SignRequest_PublicKey{
							PublicKey: []byte{
								0xa0, 0x3d, 0x6a, 0xb9, 0x80, 0x3d, 0x4b, 0xc9, 0x18, 0x9e, 0x62, 0x3f, 0x03, 0xed, 0x93, 0x65,
								0xe8, 0x1d, 0x18, 0x68, 0xcf, 0x41, 0x2b, 0x90, 0xcd, 0x64, 0x17, 0x92, 0xba, 0x72, 0x85, 0xef,
								0x0c, 0xf8, 0x07, 0x6e, 0x65, 0x1a, 0x17, 0xb6, 0x55, 0x56, 0xc5, 0xea, 0x27, 0xe0, 0x5f, 0xc5,
							},
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_SUCCEEDED, pb.ResponseState_SUCCEEDED},
			logEntries: []map[string]any{
				{"message": "Success"},
			},
		},
		{
			name:   "GoodMultiMixed",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_PublicKey{
							PublicKey: []byte{
								0xa9, 0xca, 0x9c, 0xf7, 0xfa, 0x2d, 0x0a, 0xb1, 0xd5, 0xd5, 0x2d, 0x2d, 0x8f, 0x79, 0xf6, 0x8c,
								0x50, 0xc5, 0x29, 0x6b, 0xfc, 0xe8, 0x15, 0x46, 0xc2, 0x54, 0xdf, 0x68, 0xea, 0xac, 0x04, 0x18,
								0x71, 0x7b, 0x2f, 0x9f, 0xc6, 0x65, 0x5c, 0xbb, 0xdd, 0xb1, 0x45, 0xda, 0xeb, 0x28, 0x2c, 0x00,
							},
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 2",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_SUCCEEDED, pb.ResponseState_SUCCEEDED},
			logEntries: []map[string]any{
				{"message": "Success"},
			},
		},
		{
			name:   "SameAccountTwice",
			client: "client1",
			req: &pb.MultisignRequest{
				Requests: []*pb.SignRequest{
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Data: []byte{
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
							0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
						},
						Domain: []byte{
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
							0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
						},
					},
					{
						Id: &pb.SignRequest_Account{
							Account: "Wallet 1/Account 1",
						},
						Data: []byte{
							0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
							0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
							0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
							0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
						},
						Domain: []byte{
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
							0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
						},
					},
				},
			},
			states: []pb.ResponseState{pb.ResponseState_FAILED, pb.ResponseState_FAILED},
			logEntries: []map[string]any{
				{"message": "Rules check failed"},
			},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			capture := logger.NewLogCapture()
			handler, err := Setup()
			require.Nil(t, err)

			ctx := context.WithValue(context.Background(), &interceptors.ClientName{}, test.client)
			resp, err := handler.Multisign(ctx, test.req)
			if test.err == "" {
				require.NoError(t, err)
				for i := range test.states {
					require.Equal(t, test.states[i], resp.Responses[i].State)
				}
			} else {
				require.EqualError(t, err, test.err)
			}
			for _, logEntry := range test.logEntries {
				if !capture.HasLog(logEntry) {
					require.Fail(t, fmt.Sprintf("Missing log entry %v in %v", logEntry, capture.Entries()))
				}
			}
		})
	}
}
